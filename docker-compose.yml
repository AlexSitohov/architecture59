services:

  api_gateway:
    container_name: api_gateway
    build:
      context: api_gateway
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --reload
    env_file:
      - .env
    ports:
      - "80:80"
    volumes:
      - .:/api_gateway/app
    restart: unless-stopped
    networks:
      - currency_network

  currency_db:
    image: postgres:16
    container_name: currency_db
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - currency_network

  currency_service:
    container_name: currency_service
    build:
      context: currency_service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - .:/currency_service/app
    depends_on:
      currency_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - currency_network

  init_container:
    build:
      context: currency_service
      dockerfile: init.Dockerfile
    depends_on:
      currency_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - POSTGRES_PORT=5432
    networks:
      - currency_network

  currency_producer:
    container_name: currency_producer
    build:
      context: currency_producer
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      currency_db:
        condition: service_healthy

    restart: unless-stopped
    networks:
      - currency_network

  currency_consumer:
    container_name: currency_consumer
    build:
      context: currency_consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      currency_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - currency_network


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.0
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - currency_network


  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.0
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - currency_network

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    networks:
      - currency_network


  raw_currency_db:
    image: clickhouse/clickhouse-server:latest
    container_name: raw_currency_db
    ports:
      - "8123:8123"
      - "9999:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_config:/etc/clickhouse-server
      - clickhouse_logs:/var/log/clickhouse-server
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    networks:
      - currency_network


volumes:
  pg_data:
  clickhouse_data:
  clickhouse_config:
  clickhouse_logs:


networks:
  currency_network:
    external: true
    name: currency_network