services:
  currency_db:
    image: postgres:16
    container_name: currency_db
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - currency_network

  currency_service:
    container_name: currency_service
    build:
      context: currency_service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - .:/currency_service/app
    depends_on:
      currency_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - currency_network

  init_container:
    build:
      context: currency_service
      dockerfile: init.Dockerfile
    depends_on:
      currency_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - POSTGRES_PORT=5432
    networks:
      - currency_network

  currency_producer:
    container_name: currency_producer
    build:
      context: currency_producer
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      currency_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - currency_network


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.0
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - currency_network


  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.0
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka_service-topics --bootstrap-server kafka_service:9092 --list
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - currency_network

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka
    networks:
      - currency_network


volumes:
  pg_data:

networks:
  currency_network:
    driver: bridge
